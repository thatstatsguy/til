@page "/"



<PageTitle>Index</PageTitle>
<div>
    <div class="my-1">
        <button  @onclick="AccessResultInContinuation">Access result with continuation</button>
    </div>
    <div class="my-1">
        <button  @onclick="ConditionalContinuation">Conditional continuation</button>
    </div>
    <div class="my-1">
        <button  @onclick="TaskCancellation">Trigger task</button>
        <button  @onclick="TriggerCancel">Trigger cancellation</button>
    </div>
    
    <div class="my-1">
        <button  @onclick="TaskCancellation2">Trigger Task</button>
        <button  @onclick="TriggerCancel">Trigger cancellation with early cancellation message</button>
    </div>
    
    <div class="my-1">
        <button  @onclick="TriggerTogetherAndAwaitAll">Trigger Multiple Tasks Together with WhenAll</button>
    </div>
    <div class="my-1">
        <button  @onclick="TriggerMultipleGetFastestTask">Trigger Multiple Tasks - Get Fastest Task With WhenAny</button>
    </div>
    <div class="my-1">
        <button  @onclick="DontRunContinuationOnOriginalThread">Trigger Task - don't come back to original thread in continuation</button>
    </div>
    
</div>


@if (!string.IsNullOrEmpty(_message))
{
    <p>@_message</p>
}

@code {
    private string _message = string.Empty;
    private CancellationTokenSource _cancellationToken = new CancellationTokenSource();
    private void AccessResultInContinuation()
    {
        var taskA = Task.Run(() =>
        {
            Thread.Sleep(2000);
            return "Test";
        });

        taskA.ContinueWith(t =>
        {
            //fine to reference result in this as you're guaranteed that taskA will be complete.
            _message = $"A {t.Result}";
            InvokeAsync(StateHasChanged);
            //if any exceptions thrown here you won't see this as we don't await it
        });
        
        
    }

    private void ConditionalContinuation()
    {
        var taskA = Task.Run(() =>
        {
            throw new Exception("I made a boo boo");
        });

        taskA.ContinueWith(_ =>
        {
            //shouldn't see this as the continuation option wasn't met
            _message = "I've hit the code where an exception wasn't thrown";
            InvokeAsync(StateHasChanged);
    
        }, TaskContinuationOptions.OnlyOnRanToCompletion);
        taskA.ContinueWith(t =>
        {
            //She see this as faulted condition met
            _message = $"Houston, {t.Exception.InnerException.Message}";
            InvokeAsync(StateHasChanged);
    
        }, TaskContinuationOptions.OnlyOnFaulted);
        
    }

    private async Task TaskCancellation()
    {
        
        _message = await MyTaskToCancel(_cancellationToken.Token);
        _cancellationToken = new CancellationTokenSource();
        StateHasChanged();
    }

    private Task<string> MyTaskToCancel(CancellationToken token)
    {
        return Task.Run(() =>
        {
            //simulates heavy IO operation like loading file where you may want to cancel halfway through load
            Thread.Sleep(2000);
            //exception option
            //token.ThrowIfCancellationRequested();
            return token.IsCancellationRequested ? "operation cancelled" : "Test";
        }, token);
    }

    private void TriggerCancel()
    {
        _cancellationToken.Cancel();
    }

    private async Task TaskCancellation2()
    {
        var token = _cancellationToken.Token;
        token.Register(() =>
        {
            _message =  "Cancellation has been requested!";
            InvokeAsync(StateHasChanged);
        });
        _message = await MyTaskToCancel(token);
        _cancellationToken = new CancellationTokenSource();
        StateHasChanged();
    }

    private async Task TriggerTogetherAndAwaitAll()
    {
        var taskList = new List<Task<string>>();
        taskList.Add(DoSomething("Testing"));
        taskList.Add(DoSomething("One"));
        taskList.Add(DoSomething("Two"));
        var result = await Task.WhenAll(taskList);
        _message = string.Join(",", result);
        StateHasChanged();
    }

    private Task<string> DoSomething(string message)
    {
        return Task.Run(() =>
        {
            Thread.Sleep(2000);
            return message;
        });
    }
    
    private Task<string> CustomDelay(string message, int delay)
    {
        return Task.Run(() =>
        {
            Thread.Sleep(delay);
            return message;
        });
    }

    private async Task TriggerMultipleGetFastestTask()
    {
        var taskList = new List<Task<string>>();
        taskList.Add(CustomDelay("Testing", 5000));
        taskList.Add(CustomDelay("One", 2000));
        taskList.Add(CustomDelay("This Should be the fastest", 1));

        //possible to put in a timeout in the first parameter if you wa
        //var timeoutTask = Task.Delay(10000)
        var result = await Task.WhenAny(taskList);
        _message = await result;
        StateHasChanged();
    }

    private async Task DontRunContinuationOnOriginalThread()
    {
        await Task.Delay(2000).ConfigureAwait(false);
        Console.WriteLine("this continutation will run on the same thread as the thread.sleep");
        Console.WriteLine("instead of the original calling thread. Can speed up application");
    }

}