@page "/"



<PageTitle>Index</PageTitle>
<div>
    <div class="my-1">
        <button  @onclick="AccessResultInContinuation">Access result with continuation</button>
    </div>
    <div class="my-1">
        <button  @onclick="ConditionalContinuation">Conditional continuation</button>
    </div>
    
</div>


@if (!string.IsNullOrEmpty(_message))
{
    <p>@_message</p>
}

@code {
    private string _message = string.Empty;
    private void AccessResultInContinuation()
    {
        var taskA = Task.Run(() =>
        {
            Thread.Sleep(2000);
            return "Test";
        });

        taskA.ContinueWith(t =>
        {
            //fine to reference result in this as you're guaranteed that taskA will be complete.
            _message = $"A {t.Result}";
            InvokeAsync(StateHasChanged);
            //if any exceptions thrown here you won't see this as we don't await it
        });
        
        
    }

    private void ConditionalContinuation()
    {
        var taskA = Task.Run(() =>
        {
            throw new Exception("I made a boo boo");
        });

        taskA.ContinueWith(_ =>
        {
            //shouldn't see this as the continuation option wasn't met
            _message = "I've hit the code where an exception wasn't thrown";
            InvokeAsync(StateHasChanged);
    
        }, TaskContinuationOptions.OnlyOnRanToCompletion);
        taskA.ContinueWith(t =>
        {
            //She see this as faulted condition met
            _message = $"Houston, {t.Exception.InnerException.Message}";
            InvokeAsync(StateHasChanged);
    
        }, TaskContinuationOptions.OnlyOnFaulted);
        
    }

}